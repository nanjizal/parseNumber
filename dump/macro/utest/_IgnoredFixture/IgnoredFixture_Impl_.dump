private class utest._IgnoredFixture.IgnoredFixture_Impl_ {

	public static function NotIgnored() {
		return utest._IgnoredFixture.IgnoredFixture_Impl_._new(null);
	}

	@:value({ reason : null })
	public static function Ignored(reason:Null<String> = null) {
		return utest._IgnoredFixture.IgnoredFixture_Impl_._new(if (reason != null) {
			reason;
		} else {
			"";
		});
	}

	public static var isIgnored(get,never):Bool;

	public static var ignoreReason(get,never):String;

	@:noCompletion
	public static inline function _new(reason:String) {
		var this;
		this = reason;
		return cast this;
	}

	static inline function get_isIgnored(this:String) {
		return this != null;
	}

	static inline function get_ignoreReason(this:String) {
		return this;
	}
}