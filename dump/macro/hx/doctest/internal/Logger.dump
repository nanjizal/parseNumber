@:nullSafety @:noDoc @:dox(hide)
class hx.doctest.internal.Logger {

	@:value(Level.INFO)
	public static var maxLevel:hx.doctest.internal.Level = hx.doctest.internal.Level.INFO;

	public static function log(level:hx.doctest.internal.Level, msg:String, pos:Null<haxe.PosInfos> = null) {
		if (Type.enumIndex(level) < {
			var e = hx.doctest.internal.Logger.maxLevel;
			Type.enumIndex(e);
		}) {
			return;
		};
		var posExt = cast pos;
		var charsOfLine = "";
		if (posExt.charStart != null && posExt.charEnd != null) {
			charsOfLine = "characters " + posExt.charStart + "-" + posExt.charEnd + ": ";
		};
		@:ast(switch (level) {
	case DEBUG:
	case ERROR:
		Sys.stderr().writeString((pos == null ? "" : "${pos.fileName}:${pos.lineNumber}: ") + "$charsOfLine[ERROR] ${msg}\n");
		Sys.stderr().flush();	
	default:
		haxe.Log.trace("$charsOfLine[${level}] ${msg}", pos);	
}) switch (enumIndex level) {
			case 0: {
				{};
			};
			case 4: {
				{
					Sys.stderr().writeString((if (pos == null) {
						"";
					} else {
						"" + pos.fileName + ":" + pos.lineNumber + ": ";
					}) + "" + charsOfLine + "[ERROR] " + msg + "\n", null);
					Sys.stderr().flush();
				};
			};
			default: {
				haxe.Log.trace("" + charsOfLine + "[" + Std.string(level) + "] " + msg, pos);
			}
		};
	}
}