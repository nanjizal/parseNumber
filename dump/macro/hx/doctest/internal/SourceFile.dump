@:nullSafety @:noDoc @:dox(hide)
class hx.doctest.internal.SourceFile {

	public function new(filePath:String, docTestIdentifier:String, docTestNextLineIdentifier:String) {
		this.currentLineNumber = 0;
		this.filePath = filePath;
		this.fileName = hx.doctest.internal.DocTestUtils.getFileName(filePath);
		this.docTestIdentifier = docTestIdentifier;
		this.docTestNextLineIdentifier = docTestNextLineIdentifier;
		hx.doctest.internal.Logger.log(hx.doctest.internal.Level.INFO, "Scanning [" + filePath + "]...", {fileName : "/usr/local/lib/haxeLibrary/haxe-doctest/git/src/hx/doctest/internal/SourceFile.hx", lineNumber : 42, className : "hx.doctest.internal.SourceFile", methodName : "new"});
		this.fileInput = sys.io.File.read(filePath, false);
		this.haxePackage = "";
		try {
			while ((! this.isLastLine())) {
				var line = this.fileInput.readLine();
				if ((hx.doctest.internal.SourceFile.REGEX_PACKAGE_NAME.match(line))) {
					this.haxePackage = hx.doctest.internal.SourceFile.REGEX_PACKAGE_NAME.matched(1);
					break;
				};
			};
		} catch (_g:Dynamic) {
			if ((! Std.isOfType(cast haxe.Exception.caught(_g).unwrap(), haxe.io.Eof))) throw _g;
		};
		this.fileInput.seek(0, sys.io.FileSeek.SeekBegin);
		this.haxeModuleName = hx.doctest.internal.DocTestUtils.substringBefore(this.fileName, ".");
		this.haxeModuleFQName = if ((this.haxePackage.length > 0)) "" + this.haxePackage + "." + this.haxeModuleName else this.haxeModuleName;
	}

	public var currentLine(default,null):Null<hx.doctest.internal.LineType>;

	@:value(0)
	public var currentLineNumber(default,null):Int;

	public var docTestIdentifier(default,null):String;

	public var docTestNextLineIdentifier(default,null):String;

	public var filePath(default,null):String;

	public var fileName(default,null):String;

	public var haxePackage(default,null):String;

	public var haxeModuleName(default,null):String;

	public var haxeModuleFQName(default,null):String;

	var fileInput:sys.io.FileInput;

	var lines:Array<String>;

	var lineAhead:String;

	public function isLastLine() return this.fileInput == null || this.fileInput.eof()

	public function nextLine() {
		while (! this.isLastLine()) {
			var line;
			var lineTrimmed;
			try {
				line = if (this.lineAhead == null) {
					this.fileInput.readLine();
				} else {
					this.lineAhead;
				};
				lineTrimmed = StringTools.trim(line);
				this.lineAhead = null;
			} catch (`:Dynamic) {
				var ` = haxe.Exception.caught(`);
				var ` = `.unwrap();
				if (Std.isOfType(`, haxe.io.Eof)) {
					{};
					{
						break;
					};
				} else throw `;
			};
			this.currentLineNumber ++;
			if (StringTools.startsWith(lineTrimmed, "#end")) {
				this.currentLine = hx.doctest.internal.LineType.CompilerConditionEnd;
				return true;
			};
			if (StringTools.startsWith(lineTrimmed, "#if ")) {
				this.currentLine = hx.doctest.internal.LineType.CompilerConditionStart(StringTools.trim(hx.doctest.internal.DocTestUtils.substringAfter(lineTrimmed, "#if ")));
				return true;
			};
			if (StringTools.startsWith(lineTrimmed, "#elseif ")) {
				this.currentLine = hx.doctest.internal.LineType.CompilerConditionElseIf(StringTools.trim(hx.doctest.internal.DocTestUtils.substringAfter(lineTrimmed, "#elseif ")));
				return true;
			};
			if (StringTools.startsWith(lineTrimmed, "#else if ")) {
				this.currentLine = hx.doctest.internal.LineType.CompilerConditionElseIf(StringTools.trim(hx.doctest.internal.DocTestUtils.substringAfter(lineTrimmed, "#else if ")));
				return true;
			};
			if (StringTools.startsWith(lineTrimmed, "#else")) {
				this.currentLine = hx.doctest.internal.LineType.CompilerConditionElse;
				return true;
			};
			var docTestExpression = StringTools.trim(hx.doctest.internal.DocTestUtils.substringAfter(line, this.docTestIdentifier));
			if (docTestExpression == "") {
				continue;
			};
			var docTestExpressionLineNumber = this.currentLineNumber;
			while (! this.isLastLine()) {
				try {
					this.lineAhead = StringTools.trim(this.fileInput.readLine());
				} catch (`:Dynamic) {
					var ` = haxe.Exception.caught(`);
					var ` = `.unwrap();
					if (Std.isOfType(`, haxe.io.Eof)) {
						{};
						{
							this.lineAhead = null;
							break;
						};
					} else throw `;
				};
				var docTestExpressionNextLine = StringTools.trim(hx.doctest.internal.DocTestUtils.substringAfter(this.lineAhead, this.docTestNextLineIdentifier));
				if (docTestExpressionNextLine == "") {
					break;
				} else {
					this.lineAhead = null;
					this.currentLineNumber ++;
					docTestExpression = docTestExpression + "\n" + docTestExpressionNextLine;
				};
			};
			this.currentLine = hx.doctest.internal.LineType.DocTestAssertion(new hx.doctest.internal.DocTestAssertion(this, docTestExpression, docTestExpressionLineNumber, line.indexOf(this.docTestIdentifier, null) + this.docTestIdentifier.length, line.length));
			return true;
		};
		if (this.fileInput != null) {
			this.fileInput.close();
			this.fileInput = null;
		};
		return false;
	}

	@:value(~/package\s+(([a-zA-Z_]{1}[a-zA-Z]*){2,10}\.([a-zA-Z_]{1}[a-zA-Z0-9_]*){1,30}((\.([a-zA-Z_]{1}[a-zA-Z0-9_]*){1,61})*)?)\s?;/)
	static var REGEX_PACKAGE_NAME:EReg = new EReg("package\\s+(([a-zA-Z_]{1}[a-zA-Z]*){2,10}\\.([a-zA-Z_]{1}[a-zA-Z0-9_]*){1,30}((\\.([a-zA-Z_]{1}[a-zA-Z0-9_]*){1,61})*)?)\\s?;", "g");
}