class haxe.ds.GenericStack<T> {

	public function new() {}

	public var head:haxe.ds.GenericCell<haxe.ds.GenericStack.T>;

	public inline function add(item:haxe.ds.GenericStack.T) {
		this.head = new haxe.ds.GenericCell(item, this.head);
	}

	public inline function first() {
		return if (this.head == null) {
			null;
		} else {
			this.head.elt;
		};
	}

	public inline function pop() {
		var k = this.head;
		if (k == null) {
			return null;
		} else {
			this.head = k.next;
			return k.elt;
		};
	}

	public inline function isEmpty() {
		return (this.head == null);
	}

	public function remove(v:haxe.ds.GenericStack.T) {
		var prev = null;
		var l = this.head;
		while (l != null) {
			if (l.elt == v) {
				if (prev == null) {
					this.head = l.next;
				} else {
					prev.next = l.next;
				};
				break;
			};
			prev = l;
			l = l.next;
		};
		return (l != null);
	}

	public function iterator() {
		var l = [this.head];
		return {hasNext : function() {
			return l[0] != null;
		}, next : function() {
			var k = l[0];
			l[0] = k.next;
			return k.elt;
		}};
	}

	public function toString() {
		var a = new Array();
		var l = this.head;
		while (l != null) {
			a.push(l.elt);
			l = l.next;
		};
		return "{" + a.join(",") + "}";
	}
}