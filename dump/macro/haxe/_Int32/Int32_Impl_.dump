private class haxe._Int32.Int32_Impl_ {

	@:op(-A)
	static inline function negate(this:Int) return haxe._Int32.Int32_Impl_.clamp(~ this + 1)

	@:op(++A)
	static inline function preIncrement(this:Int) return this = haxe._Int32.Int32_Impl_.clamp(++ this)

	@:op(A++)
	static inline function postIncrement(this:Int) {
		var ret = this ++;
		this = haxe._Int32.Int32_Impl_.clamp(this);
		return ret;
	}

	@:op(--A)
	static inline function preDecrement(this:Int) return this = haxe._Int32.Int32_Impl_.clamp(-- this)

	@:op(A--)
	static inline function postDecrement(this:Int) {
		var ret = this --;
		this = haxe._Int32.Int32_Impl_.clamp(this);
		return ret;
	}

	@:op(A + B)
	static inline function add(a:haxe.Int32, b:haxe.Int32) return haxe._Int32.Int32_Impl_.clamp((cast a) + (cast b))

	@:op(A + B) @:commutative
	static inline function addInt(a:haxe.Int32, b:Int) return haxe._Int32.Int32_Impl_.clamp((cast a) + (cast b))

	@:op(A - B)
	static inline function sub(a:haxe.Int32, b:haxe.Int32) return haxe._Int32.Int32_Impl_.clamp((cast a) - (cast b))

	@:op(A - B)
	static inline function subInt(a:haxe.Int32, b:Int) return haxe._Int32.Int32_Impl_.clamp((cast a) - (cast b))

	@:op(A - B)
	static inline function intSub(a:Int, b:haxe.Int32) return haxe._Int32.Int32_Impl_.clamp((cast a) - (cast b))

	@:to
	static inline function toFloat(this:Int) return this

	public static function ucompare(a:haxe.Int32, b:haxe.Int32) {
		if (a < 0) {
			return if (b < 0) {
				(haxe._Int32.Int32_Impl_.sub(~ b, ~ a));
			} else {
				1;
			};
		};
		return if (b < 0) {
			-1;
		} else {
			(haxe._Int32.Int32_Impl_.sub(a, b));
		};
	}

	static inline function clamp(x:Int) {
		return (x);
	}
}