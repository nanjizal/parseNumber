class haxe.Timer {

	public function new(time_ms:Int) {
		var `this = this;
		this.thread = sys.thread._Thread.Thread_Impl_.current();
		this.eventHandler = sys.thread._Thread.Thread_Impl_.get_events(this.thread).repeat(function() `this.run(), time_ms);
	}

	var thread:sys.thread.Thread;

	var eventHandler:sys.thread.EventHandler;

	public function stop() {
		sys.thread._Thread.Thread_Impl_.get_events(this.thread).cancel(this.eventHandler);
	}

	public dynamic function run() {}

	public static function delay(f:() -> Void, time_ms:Int) {
		var t = new haxe.Timer(time_ms);
		t.run = function() {
			t.stop();
			f();
		};
		return t;
	}

	public static function measure<T>(f:() -> measure.T, pos:Null<haxe.PosInfos> = null) {
		var t0 = haxe.Timer.stamp();
		var r = f();
		haxe.Log.trace((haxe.Timer.stamp() - t0) + "s", pos);
		return r;
	}

	public static inline function stamp() {
		return Sys.time();
	}
}