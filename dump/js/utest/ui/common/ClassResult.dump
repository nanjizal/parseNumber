@:directlyUsed @:used
class utest.ui.common.ClassResult {

	public function new(className:String, setupName:String, teardownName:String) {
		this.fixtures = haxe.ds._Map.Map_Impl_.toStringMap(null);
		this.className = className;
		this.setupName = setupName;
		this.hasSetup = setupName != null;
		this.teardownName = teardownName;
		this.hasTeardown = teardownName != null;
		this.methods = 0;
		this.stats = new utest.ui.common.ResultStats();
	}

	var fixtures:Map<String, utest.ui.common.FixtureResult>;

	public var className(default,null):String;

	public var setupName(default,null):String;

	public var teardownName(default,null):String;

	public var hasSetup(default,null):Bool;

	public var hasTeardown(default,null):Bool;

	public var methods(default,null):Int;

	public var stats(default,null):utest.ui.common.ResultStats;

	public function add(result:utest.ui.common.FixtureResult) {
		if ((haxe.ds._Map.Map_Impl_.exists(this.fixtures, result.methodName))) throw haxe.Exception.thrown("invalid duplicated fixture: " + this.className + "." + result.methodName);
		this.stats.wire(result.stats);
		this.methods ++;
		haxe.ds._Map.Map_Impl_.set(this.fixtures, result.methodName, result);
	}

	public function get(method:String) {
		return haxe.ds._Map.Map_Impl_.get(this.fixtures, method);
	}

	public function exists(method:String) {
		return haxe.ds._Map.Map_Impl_.exists(this.fixtures, method);
	}

	@:value({ errorsHavePriority : true })
	public function methodNames(errorsHavePriority:Bool = true) {
		var names = [];
		{
			var name = haxe.ds._Map.Map_Impl_.keys(this.fixtures);
			while ((name.hasNext())) {
				var name1 = name.next();
				names.push(name1);
			};
		};
		if ((errorsHavePriority)) {
			var me = this;
			names.sort(function(a:String, b:String) {
				var as = me.get(a).stats;
				var bs = me.get(b).stats;
				if ((as.hasErrors)) {
					if ((! bs.hasErrors)) return -1 else if ((as.errors == bs.errors)) return Reflect.compare(a, b) else return Reflect.compare(as.errors, bs.errors);
				} else if ((bs.hasErrors)) return 1 else if ((as.hasFailures)) {
					if ((! bs.hasFailures)) return -1 else if ((as.failures == bs.failures)) return Reflect.compare(a, b) else return Reflect.compare(as.failures, bs.failures);
				} else if ((bs.hasFailures)) return 1 else if ((as.hasWarnings)) {
					if ((! bs.hasWarnings)) return -1 else if ((as.warnings == bs.warnings)) return Reflect.compare(a, b) else return Reflect.compare(as.warnings, bs.warnings);
				} else if ((bs.hasWarnings)) return 1 else return Reflect.compare(a, b);
			});
		} else names.sort(function(a:String, b:String) {
			return Reflect.compare(a, b);
		});
		return names;
	}
}