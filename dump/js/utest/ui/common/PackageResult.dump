@:directlyUsed @:used
class utest.ui.common.PackageResult {

	public function new(packageName:String) {
		this.isEmpty = true;
		this.packageName = packageName;
		this.classes = haxe.ds._Map.Map_Impl_.toStringMap(null);
		this.packages = haxe.ds._Map.Map_Impl_.toStringMap(null);
		this.stats = new utest.ui.common.ResultStats();
	}

	public var packageName(default,null):String;

	@:value(true)
	public var isEmpty(default,null):Bool;

	var classes:Map<String, utest.ui.common.ClassResult>;

	var packages:Map<String, utest.ui.common.PackageResult>;

	public var stats(default,null):utest.ui.common.ResultStats;

	public function addResult(result:utest.TestResult, flattenPackage:Bool) {
		this.isEmpty = false;
		var pack = this.getOrCreatePackage(result.pack, flattenPackage, this);
		var cls = this.getOrCreateClass(pack, result.cls, result.setup, result.teardown);
		var fix = this.createFixture(result.method, result.assertations);
		cls.add(fix);
	}

	public function addClass(result:utest.ui.common.ClassResult) {
		this.isEmpty = false;
		haxe.ds._Map.Map_Impl_.set(this.classes, result.className, result);
		this.stats.wire(result.stats);
	}

	public function addPackage(result:utest.ui.common.PackageResult) {
		this.isEmpty = false;
		haxe.ds._Map.Map_Impl_.set(this.packages, result.packageName, result);
		this.stats.wire(result.stats);
	}

	public function existsPackage(name:String) {
		return haxe.ds._Map.Map_Impl_.exists(this.packages, name);
	}

	public function existsClass(name:String) {
		return haxe.ds._Map.Map_Impl_.exists(this.classes, name);
	}

	public function getPackage(name:String) {
		if ((this.packageName == null && name == "")) return this;
		return haxe.ds._Map.Map_Impl_.get(this.packages, name);
	}

	public function getClass(name:String) {
		return haxe.ds._Map.Map_Impl_.get(this.classes, name);
	}

	@:value({ errorsHavePriority : true })
	public function classNames(errorsHavePriority:Bool = true) {
		var names = [];
		{
			var name = haxe.ds._Map.Map_Impl_.keys(this.classes);
			while ((name.hasNext())) {
				var name1 = name.next();
				names.push(name1);
			};
		};
		if ((errorsHavePriority)) {
			var me = this;
			names.sort(function(a:String, b:String) {
				var as = me.getClass(a).stats;
				var bs = me.getClass(b).stats;
				if ((as.hasErrors)) {
					if ((! bs.hasErrors)) return -1 else if ((as.errors == bs.errors)) return Reflect.compare(a, b) else return Reflect.compare(as.errors, bs.errors);
				} else if ((bs.hasErrors)) return 1 else if ((as.hasFailures)) {
					if ((! bs.hasFailures)) return -1 else if ((as.failures == bs.failures)) return Reflect.compare(a, b) else return Reflect.compare(as.failures, bs.failures);
				} else if ((bs.hasFailures)) return 1 else if ((as.hasWarnings)) {
					if ((! bs.hasWarnings)) return -1 else if ((as.warnings == bs.warnings)) return Reflect.compare(a, b) else return Reflect.compare(as.warnings, bs.warnings);
				} else if ((bs.hasWarnings)) return 1 else return Reflect.compare(a, b);
			});
		} else names.sort(function(a:String, b:String) {
			return Reflect.compare(a, b);
		});
		return names;
	}

	@:value({ errorsHavePriority : true })
	public function packageNames(errorsHavePriority:Bool = true) {
		var names = [];
		if ((this.packageName == null)) names.push("");
		{
			var name = haxe.ds._Map.Map_Impl_.keys(this.packages);
			while ((name.hasNext())) {
				var name1 = name.next();
				names.push(name1);
			};
		};
		if ((errorsHavePriority)) {
			var me = this;
			names.sort(function(a:String, b:String) {
				var as = me.getPackage(a).stats;
				var bs = me.getPackage(b).stats;
				if ((as.hasErrors)) {
					if ((! bs.hasErrors)) return -1 else if ((as.errors == bs.errors)) return Reflect.compare(a, b) else return Reflect.compare(as.errors, bs.errors);
				} else if ((bs.hasErrors)) return 1 else if ((as.hasFailures)) {
					if ((! bs.hasFailures)) return -1 else if ((as.failures == bs.failures)) return Reflect.compare(a, b) else return Reflect.compare(as.failures, bs.failures);
				} else if ((bs.hasFailures)) return 1 else if ((as.hasWarnings)) {
					if ((! bs.hasWarnings)) return -1 else if ((as.warnings == bs.warnings)) return Reflect.compare(a, b) else return Reflect.compare(as.warnings, bs.warnings);
				} else if ((bs.hasWarnings)) return 1 else return Reflect.compare(a, b);
			});
		} else names.sort(function(a:String, b:String) {
			return Reflect.compare(a, b);
		});
		return names;
	}

	function createFixture(method:String, assertations:Iterable<utest.Assertation>) {
		var f = new utest.ui.common.FixtureResult(method);
		{
			var assertation = assertations.iterator();
			while ((assertation.hasNext())) {
				var assertation1 = assertation.next();
				f.add(assertation1);
			};
		};
		return f;
	}

	function getOrCreateClass(pack:utest.ui.common.PackageResult, cls:String, setup:String, teardown:String) {
		if ((pack.existsClass(cls))) return pack.getClass(cls);
		var c = new utest.ui.common.ClassResult(cls, setup, teardown);
		pack.addClass(c);
		return c;
	}

	function getOrCreatePackage(pack:String, flat:Bool, ref:utest.ui.common.PackageResult) {
		if ((pack == null || pack == "")) return ref;
		if ((flat)) {
			if ((ref.existsPackage(pack))) return ref.getPackage(pack);
			var p = new utest.ui.common.PackageResult(pack);
			ref.addPackage(p);
			return p;
		} else {
			var parts = pack.split(".");
			{
				var _g = 0;
				while ((_g < parts.length)) {
					var part = parts[_g];
					++ _g;
					ref = this.getOrCreatePackage(part, true, ref);
				};
			};
			return ref;
		};
	}
}